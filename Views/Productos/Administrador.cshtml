@using GRINPLAS.ViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
  ViewData["Title"] = "Administrador";
  Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
  var token = Xsrf.GetAndStoreTokens(Context).RequestToken;
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
}




<div class="d-flex flex-column">
  <div class="container p-6 m-2">
    <div class="d-flex align-items-center small">
      <a href="#" class="text-muted" style="text-decoration: none">Inicio</a>
      <span class="mx-2">/</span>
      <span class="fw-bold" style="color: #09c33d">Historial de productos</span>
    </div>
  </div>




  <div class="d-flex justify-content-between align-items-center mt-4">
    <h1 class="display-6 ps-5 fw-semibold fs-2">Historial de Productos</h1>
  </div>





  <div class="mt-4 d-flex justify-content-between align-items-center ms-5 me-5">
    <div class="d-flex gap-3 text-muted">
      <p>Listado de productos</p>
    </div>
    <div class="d-flex gap-2 mb-3">
      <!-- Botón separado -->
      <button id="btnExportExcel" class="btn btn-success ms-2" type="button" style="width: 180px; height: 45px;">
        <i class="fas fa-file-excel me-2"></i>Exportar Excel
      </button>
      <form method="get" asp-action="BuscarProductos" class="d-flex gap-2 mb-3">
        <div class="input-group border border-success rounded">
          <input type="text" id="nombreFiltro" name="nombreFiltro" class="form-control border-0"
            placeholder="Buscar por nombre..." value="@ViewData["nombreFiltro"]" />
        </div>
        <div class="input-group border border-success rounded">
          <select id="categoriaFiltro" name="categoriaFiltro" class="form-select border-0">
            <option value="0">Categoría</option>
            @foreach (var categoria in Model.Categorias)
            {
              <option value="@categoria.CategoriaId">@categoria.Nombre</option>
            }
          </select>
        </div>
        <button id="btnFiltrar" class="btn btn-success ms-2" type="submit"
          style="width: 160px; height: 45px;">Filtrar</button>
        <button id="btnResetear" class="btn btn-outline-secondary ms-2" type="button" onclick="resetFilters()"
          style="width: 160px; height: 45px;">Resetear</button>
      </form>





      <button id="btnRegistrarProducto" class="btn btn-success ms-2" type="button" style="width: 180px; height: 45px;"
        data-bs-toggle="modal" data-bs-target="#registerModal">
        <i class="fas fa-plus me-2"></i>Registrar
      </button>

    </div>
  </div>

  <hr class="mt-2 ms-5 me-5" />
  <div class="mt-4 table-responsive ms-5 me-5">
    <form method="post" asp-action="ActualizarPedido" class="pedido-form">
      <table id="ordersTable" class="table table-bordered">
        <thead class="table-light">
          <tr>
            <th style="width: 5%;">Id</th>
            <th style="width: 10%;">Imagen</th>
            <th style="width: 20%;">Nombre</th>
            <th style="width: 30%;">Descripción</th>
            <th style="width: 15%;">Categoría</th>
            <th style="width: 10%;">Precio</th>
            <th style="width: 10%;">Cantidad</th>
            <th style="width: 10%;">Acciones</th>
          </tr>
        </thead>
        <tbody>
          @foreach (var producto in Model.Productos)
          {
            <tr data-pedido-id="@producto.ProductoId">
              <input type="hidden" name="productoId" value="@producto.ProductoId" />
              <td>@producto.ProductoId</td>
              <td class="text-center">
                <img src="@producto.Imagen" alt="Producto Imagen" class="img-fluid" style="width:40px; height:40px" />
              </td>
              <td>@producto.Nombre</td>
              <td>@producto.Descripcion</td>
              <td>@producto.Categoria.Nombre</td>
              <td>@producto.Precio</td>
              <td>@producto.Stock</td>
              <td class="text-center">
                <a href="#" class="text-success me-2" data-bs-toggle="modal" data-bs-target="#editModal"
                  data-id="@producto.ProductoId" data-nombre="@producto.Nombre" data-descripcion="@producto.Descripcion"
                  data-precio="@producto.Precio" data-stock="@producto.Stock" data-imagen="@producto.Imagen"
                  data-categoria="@producto.CategoriaId">
                  <i class="fas fa-edit"></i>
                </a>
                <a href="#" class="text-success" onclick="confirmDelete(@producto.ProductoId)">
                  <i class="fas fa-trash"></i>
                </a>
              </td>
            </tr>
          }
        </tbody>

      </table>
    </form>
  </div>
</div>
<!-- Modal Registraar Producto -->
<div class="modal fade" id="registerModal" tabindex="-1" aria-labelledby="registerModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="registerModalLabel">Registrar Producto</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="registerProductForm" method="post" asp-action="RegistrarProducto">
          @Html.AntiForgeryToken()
          <input type="hidden" name="ProductoId" value="0" />

          <div class="mb-3">
            <label for="Nombre" class="form-label">Nombre</label>
            <input type="text" class="form-control" id="Nombre" name="Nombre" required />
          </div>
          <div class="mb-3">
            <label for="Descripcion" class="form-label">Descripción</label>
            <textarea class="form-control" id="Descripcion" name="Descripcion" required></textarea>
          </div>
          <div class="mb-3">
            <label for="Precio" class="form-label">Precio</label>
            <input type="number" class="form-control" id="Precio" name="Precio" step="0.01" required />
          </div>
          <div class="mb-3">
            <label for="StockRegistrar" class="form-label">Stock</label>
            <input type="number" class="form-control" id="StockRegistrar" name="Stock" required min="1" step="1" />


          </div>

          <div class="mb-3">
            <label for="Imagen" class="form-label">Imagen URL</label>
            <input type="text" class="form-control" id="Imagen" name="Imagen" required />
          </div>
          <div class="mb-3">
            <label for="CategoriaId" class="form-label">Categoría</label>
            <select class="form-select" id="CategoriaId" name="CategoriaId" required>
              @foreach (var categoria in Model.Categorias)
              {
                <option value="@categoria.CategoriaId">@categoria.Nombre</option>
              }
            </select>
          </div>
          <button type="submit" class="btn btn-success">Registrar Producto</button>
        </form>
      </div>
    </div>
  </div>
</div>




<!-- Modal Edicion Producto -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editModalLabel">Editar Producto</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editProductForm" method="post" asp-action="EditarProducto">
          @Html.AntiForgeryToken()
          <input type="hidden" id="ProductoId" name="ProductoId" />
          <div class="mb-3">
            <label for="Nombre" class="form-label">Nombre</label>
            <input type="text" class="form-control" id="NombreEditar" name="Nombre" />
          </div>
          <div class="mb-3">
            <label for="Descripcion" class="form-label">Descripción</label>
            <textarea class="form-control" id="Descripcion" name="Descripcion"></textarea>
          </div>
          <div class="mb-3">
            <label for="Precio" class="form-label">Precio</label>
            <input type="number" class="form-control" id="Precio" name="Precio" step="0.01" />
          </div>
          <div class="mb-3">
            <label for="StockEditar" class="form-label">Stock</label>
            <input type="number" class="form-control" id="StockEditar" name="Stock" required min="1" step="1"
              title="El stock debe ser un número entero positivo mayor que cero." />
          </div>

          <div class="mb-3">
            <label for="Imagen" class="form-label">Imagen URL</label>
            <input type="text" class="form-control" id="Imagen" name="Imagen" />
          </div>
          <div class="mb-3">
            <label for="CategoriaId" class="form-label">Categoría</label>
            <select class="form-select" id="CategoriaIdEditar" name="CategoriaId">
              @foreach (var categoria in Model.Categorias)
              {
                <option value="@categoria.CategoriaId">@categoria.Nombre</option>
              }
            </select>
          </div>
          <button type="submit" class="btn btn-success">Guardar producto</button>
        </form>
      </div>
    </div>
  </div>
</div>

<form id="deleteForm" method="post" asp-action="EliminarProducto">
  @Html.AntiForgeryToken()
  <input type="hidden" id="deleteProductId" name="id" />
</form>


@section Scripts {
  <script src="~/js/administrador.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
  <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
  <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>

  <script>
    function resetFilters() {
      document.getElementById("nombreFiltro").value = "";
      document.getElementById("categoriaFiltro").value = "0";
      window.location.href = '@Url.Action("Administrador", "Productos")';
    }
    $(document).ready(function () {
      // Función para validar precio
      function validarPrecio(input) {
        const val = parseFloat(input.value);
        if (isNaN(val) || val <= 0) {
          input.setCustomValidity('Ingrese un precio válido mayor a 0');
          return false;
        } else {
          input.setCustomValidity('');
          return true;
        }
      }

      // Función para validar stock
      function validarStock(input) {
        const val = Number(input.value);
        if (!Number.isInteger(val) || val <= 0) {
          input.setCustomValidity('El stock debe ser un número entero positivo');
          return false;
        } else {
          input.setCustomValidity('');
          return true;
        }
      }

      // Asignar eventos input para limpiar mensaje de error en precio y stock
      $('input[name="Precio"]').on('input', function () {
        validarPrecio(this);
      });

      $('input[name="Stock"]').on('input', function () {
        validarStock(this);
      });

      // Validar todo el formulario al submit
      $('form').on('submit', function (e) {
        let valid = true;

        const precio = $(this).find('input[name="Precio"]')[0];
        const stock = $(this).find('input[name="Stock"]')[0];

        if (precio && !validarPrecio(precio)) {
          valid = false;
        }

        if (stock && !validarStock(stock)) {
          valid = false;
        }

        if (!valid) {
          e.preventDefault();
          this.reportValidity();
        }
      });
      $(document).ready(function () {
        function validarPrecio(input) {
          if (input.value.trim() === '') {
            input.setCustomValidity('Complete todos los campos obligatorios');
            return false;
          }

          const val = parseFloat(input.value);
          if (isNaN(val) || val <= 0) {
            input.setCustomValidity('Ingrese un precio válido mayor a 0');
            return false;
          }

          input.setCustomValidity('');
          return true;
        }

        function validarStock(input) {
          if (input.value.trim() === '') {
            input.setCustomValidity('Complete todos los campos obligatorios');
            return false;
          }

          const val = Number(input.value);
          if (!Number.isInteger(val) || val <= 0) {
            input.setCustomValidity('El stock debe ser un número entero positivo');
            return false;
          }

          input.setCustomValidity('');
          return true;
        }

        function validarProducto(input) {
          if (input.value.trim() === '') {
            input.setCustomValidity('Complete todos los campos obligatorios');
            return false;
          }

          input.setCustomValidity('');
          return true;
        }

        // Validar mientras se escribe
        $('input[name="Producto"]').on('input', function () {
          validarProducto(this);
        });

        $('input[name="Precio"]').on('input', function () {
          validarPrecio(this);
        });

        $('input[name="Stock"]').on('input', function () {
          validarStock(this);
        });

        // Validación al enviar formulario
        $('form').on('submit', function (e) {
          let valid = true;

          const producto = $(this).find('input[name="Producto"]')[0];
          const precio = $(this).find('input[name="Precio"]')[0];
          const stock = $(this).find('input[name="Stock"]')[0];

          if (producto && !validarProducto(producto)) valid = false;
          if (precio && !validarPrecio(precio)) valid = false;
          if (stock && !validarStock(stock)) valid = false;

          if (!valid) {
            e.preventDefault(); // Evita enviar el formulario
            this.reportValidity(); // Muestra los mensajes de error nativos
          }
        });
      });


      // El resto del código DataTables, exportar, etc...
    });
    $(document).ready(function () {
      function validarPrecio(input) {
        const val = parseFloat(input.value);
        if (isNaN(val) || val <= 0) {
          input.setCustomValidity('Ingrese un precio válido mayor a 0');
          return false;
        } else {
          input.setCustomValidity('');
          return true;
        }
      }

      function validarStock(input) {
        const val = Number(input.value);
        if (input.value.trim() === '') {
          input.setCustomValidity('Complete todos los campos obligatorios');
          return false;
        }
        if (!Number.isInteger(val) || val <= 0) {
          input.setCustomValidity('El stock debe ser un número entero positivo');
          return false;
        } else {
          input.setCustomValidity('');
          return true;
        }
      }

      function validarProducto(input) {
        if (input.value.trim() === '') {
          input.setCustomValidity('Complete todos los campos obligatorios');
          return false;
        } else {
          input.setCustomValidity('');
          return true;
        }
      }

      // Validar inputs en evento input para limpiar mensajes
      $('input[name="Precio"]').on('input', function () {
        validarPrecio(this);
      });

      $('input[name="Stock"]').on('input', function () {
        validarStock(this);
      });

      $('input[name="Producto"]').on('input', function () {
        validarProducto(this);
      });

      // Validación en el submit del formulario
      $('form').on('submit', function (e) {
        let valid = true;

        const producto = $(this).find('input[name="Producto"]')[0];
        const precio = $(this).find('input[name="Precio"]')[0];
        const stock = $(this).find('input[name="Stock"]')[0];

        if (producto && !validarProducto(producto)) valid = false;
        if (precio && !validarPrecio(precio)) valid = false;
        if (stock && !validarStock(stock)) valid = false;

        if (!valid) {
          e.preventDefault();
          this.reportValidity();
        }
      });
    });


    $(document).ready(function () {
      // Inicializar DataTables
      var table = $('#ordersTable').DataTable({
        "pageLength": 4,
        "lengthChange": false,
        "language": {
          "paginate": {
            "previous": "Anterior",
            "next": "Siguiente"
          },
          "info": "Página _PAGE_ de _PAGES_",
          "infoEmpty": "No hay datos disponibles",
          "emptyTable": "No hay productos registrados",
          "search": "Buscar:"
        }
      });

      // Validaciones personalizadas para inputs required
      $('input[required], textarea[required], select[required]').each(function () {
        this.oninvalid = function (e) {
          var name = e.target.name;
          if (name === 'Precio') {
            e.target.setCustomValidity('Ingrese un precio válido mayor a 0');
          } else if (name === 'Stock') {
            e.target.setCustomValidity('El stock debe ser un número entero positivo');
          } else {
            e.target.setCustomValidity('Complete todos los campos obligatorios');
          }
        };
        this.oninput = function (e) {
          e.target.setCustomValidity('');
        };
      });

      // Validación al enviar formularios (registro/edición)
      $('form').on('submit', function (e) {
        var precio = $(this).find('input[name="Precio"]');
        var stock = $(this).find('input[name="Stock"]');
        var valid = true;

        if (precio.length && parseFloat(precio.val()) <= 0) {
          precio[0].setCustomValidity('Ingrese un precio válido mayor a 0');
          valid = false;
        }

        if (stock.length && (!Number.isInteger(Number(stock.val())) || Number(stock.val()) <= 0)) {
          stock[0].setCustomValidity('El stock debe ser un número entero positivo');
          valid = false;
        }

        if (!valid) {
          e.preventDefault();
          this.reportValidity();
        }
      });

      // Exportar tabla filtrada a Excel
      $('#btnExportExcel').click(function () {
        var columnsToExport = [0, 2, 3, 4, 5, 6]; // Columnas a exportar
        var tempTable = $('<table></table>');
        var headerRow = $('<tr></tr>');

        $('#ordersTable thead th').each(function (index) {
          if (columnsToExport.includes(index)) {
            headerRow.append($('<th></th>').text($(this).text()));
          }
        });
        tempTable.append(headerRow);

        var allData = [];
        table.rows({ search: 'applied' }).every(function () {
          var rowData = this.data();
          var filteredRowData = columnsToExport.map(i => rowData[i]);
          allData.push(filteredRowData);
        });

        allData.forEach(function (rowData) {
          var row = $('<tr></tr>');
          rowData.forEach(function (cellData) {
            row.append($('<td></td>').text(cellData));
          });
          tempTable.append(row);
        });

        var wb = XLSX.utils.table_to_book(tempTable[0], { sheet: "Productos" });
        XLSX.writeFile(wb, "Historial_Productos.xlsx");
      });
    });

    // Confirmación para eliminar producto
    function confirmDelete(productId) {
      Swal.fire({
        title: '¿Deseas eliminar este producto?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar',
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d'
      }).then((result) => {
        if (result.isConfirmed) {
          document.getElementById('deleteProductId').value = productId;
          document.getElementById('deleteForm').submit();
        }
      });
    }

    // Cargar datos en el modal de edición al abrirlo
    $('#editModal').on('show.bs.modal', function (event) {
      var button = $(event.relatedTarget);
      var modal = $(this);

      modal.find('#ProductoId').val(button.data('id'));
      modal.find('#NombreEditar').val(button.data('nombre')).trigger('input');
      modal.find('#Descripcion').val(button.data('descripcion')).trigger('input');
      modal.find('#Precio').val(button.data('precio')).trigger('input');
      modal.find('#StockEditar').val(button.data('stock')).trigger('input');
      modal.find('#Imagen').val(button.data('imagen'));
      modal.find('#CategoriaIdEditar').val(button.data('categoria')).trigger('change');
    });

  </script>

  @if (TempData["SuccessMessage"] != null)
  {
    <script>
      Swal.fire({
        icon: 'success',
        text: '@TempData["SuccessMessage"]',
        showConfirmButton: false,
        timer: 3000
      });
    </script>
  }
  @if (TempData["ErrorMessage"] != null)
  {
    <script>
      Swal.fire('Error', '@TempData["ErrorMessage"]', 'error');
    </script>
  }
}
